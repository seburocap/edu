import websocket
import json
import datetime
import pandas as pd
from threading import Thread
import time
import requests

class BinanceLiquidationTrackerTelegram:
    def __init__(self, symbol='BTCUSDT', telegram_bot_token=None, telegram_chat_id=None):
        self.symbol = symbol
        self.liquidations = []
        self.websocket_url = f"wss://fstream.binance.com/ws/!forceOrder@arr"
        self.is_running = True
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        
        # –î–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.five_min_data = []
        self.last_aggregate_time = datetime.datetime.now()
        
    def send_telegram_message(self, message, parse_mode='Markdown'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª"""
        if not self.telegram_bot_token or not self.telegram_chat_id:
            return False
        
        url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
        data = {
            "chat_id": self.telegram_chat_id,
            "text": message,
            "parse_mode": parse_mode,
            "disable_web_page_preview": True
        }
        
        try:
            response = requests.post(url, data=data)
            if response.status_code == 200:
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
                return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
    
    def format_liquidation_message(self, liquidation):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –¥–ª—è Telegram"""
        total_value = liquidation['quantity'] * liquidation['price']
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
        emoji = "üî¥" if liquidation['side'] == "SELL" else "üü¢"
        
        message = f"""
{emoji} *–õ–∏–∫–≤–∏–¥–∞—Ü–∏—è {liquidation['side'].upper()}*
‚ö°Ô∏è *{liquidation['symbol']}*

üìÖ –í—Ä–µ–º—è: `{liquidation['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}`
üí∞ –¶–µ–Ω–∞: `${liquidation['price']:,.2f}`
üìä –û–±—ä–µ–º: `{liquidation['quantity']:.6f} BTC`
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: `${total_value:,.2f}`
"""
        return message
    
    def format_five_min_stats_message(self, df):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç 5-–º–∏–Ω—É—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è Telegram"""
        side_stats = df.groupby('side').agg({
            'quantity': ['count', 'sum'],
            'price': 'mean'
        })
        
        message = f"""
üìä *5-–º–∏–Ω—É—Ç–Ω—ã–π –æ—Ç—á–µ—Ç*
üïí –í—Ä–µ–º—è: `{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`

üìà *–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º:*
"""
        
        for side in side_stats.index:
            count = side_stats.loc[side, ('quantity', 'count')]
            total_quantity = side_stats.loc[side, ('quantity', 'sum')]
            avg_price = side_stats.loc[side, ('price', 'mean')]
            total_value = total_quantity * avg_price
            
            side_emoji = "üî¥" if side == "SELL" else "üü¢"
            message += f"""
{side_emoji} *{side} –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏:*
   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{count}`
   ‚Ä¢ –û–±—ä–µ–º: `{total_quantity:.6f} BTC`
   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: `${avg_price:,.2f}`
   ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: `${total_value:,.2f}`
"""
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_liquidations = len(df)
        total_volume = df['quantity'].sum()
        avg_price = df['price'].mean()
        total_value = (df['quantity'] * df['price']).sum()
        
        message += f"""
üåç *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
   ‚Ä¢ –í—Å–µ–≥–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: `{total_liquidations}`
   ‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: `{total_volume:.6f} BTC`
   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: `${avg_price:,.2f}`
   ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: `${total_value:,.2f}`
"""
        return message
    
    def on_message(self, ws, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket"""
        try:
            data = json.loads(message)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏ BTCUSDT
            if self.symbol in data['o']['s']:
                liquidation_data = {
                    'timestamp': datetime.datetime.fromtimestamp(data['E'] / 1000),
                    'symbol': data['o']['s'],
                    'side': data['o']['S'],  # BUY/SELL
                    'order_type': data['o']['o'],
                    'time_in_force': data['o']['f'],
                    'quantity': float(data['o']['q']),
                    'price': float(data['o']['p']),
                    'average_price': float(data['o']['ap']),
                    'order_status': data['o']['X'],
                    'last_filled_qty': float(data['o']['l']),
                    'cumulative_filled_qty': float(data['o']['z']),
                    'trade_time': datetime.datetime.fromtimestamp(data['o']['T'] / 1000)
                }
                
                self.liquidations.append(liquidation_data)
                self.five_min_data.append(liquidation_data)
                self.print_liquidation(liquidation_data)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                telegram_message = self.format_liquidation_message(liquidation_data)
                self.send_telegram_message(telegram_message)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 5 –º–∏–Ω—É—Ç
                self.check_and_display_five_min_stats()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def on_error(self, ws, error):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        print(f"–û—à–∏–±–∫–∞: {error}")
    
    def on_close(self, ws, close_status_code, close_msg):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    def on_open(self, ws):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ {self.symbol}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        start_message = f"""
üöÄ *–ó–∞–ø—É—â–µ–Ω —Ç—Ä–µ–∫–µ—Ä –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π*
üìç –°–∏–º–≤–æ–ª: `{self.symbol}`
üïí –í—Ä–µ–º—è: `{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`
"""
        self.send_telegram_message(start_message)
    
    def print_liquidation(self, liquidation):
        """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏"""
        print("="*50)
        print(f"üî• –õ–ò–ö–í–ò–î–ê–¶–ò–Ø - {liquidation['side'].upper()}")
        print(f"–í—Ä–µ–º—è: {liquidation['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–°–∏–º–≤–æ–ª: {liquidation['symbol']}")
        print(f"–¶–µ–Ω–∞: ${liquidation['price']:,.2f}")
        print(f"–û–±—ä–µ–º: {liquidation['quantity']:.6f}")
        print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ${liquidation['quantity'] * liquidation['price']:,.2f}")
        print(f"–°—Ç–∞—Ç—É—Å: {liquidation['order_status']}")
        print("="*50)
    
    def check_and_display_five_min_stats(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–æ –ª–∏ 5 –º–∏–Ω—É—Ç, –∏ –≤—ã–≤–æ–¥–∏—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        current_time = datetime.datetime.now()
        time_diff = current_time - self.last_aggregate_time
        
        if time_diff.total_seconds() >= 300:  # 5 –º–∏–Ω—É—Ç
            self.display_five_min_stats()
            self.last_aggregate_time = current_time
            self.five_min_data = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 5 –º–∏–Ω—É—Ç
    
    def display_five_min_stats(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç"""
        if not self.five_min_data:
            print("\nüìä 5-–º–∏–Ω—É—Ç–Ω—ã–π –æ—Ç—á–µ—Ç: –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç –Ω–µ –±—ã–ª–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π")
            return
        
        df = pd.DataFrame(self.five_min_data)
        
        print("\n" + "="*70)
        print(f"üìä 5-–ú–ò–ù–£–¢–ù–´–ô –û–¢–ß–ï–¢ (–í—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")
        print("="*70)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram
        telegram_message = self.format_five_min_stats_message(df)
        self.send_telegram_message(telegram_message)
        
        # –û–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º
        print("\nüìà –õ–ò–ö–í–ò–î–ê–¶–ò–ò –ü–û –°–¢–û–†–û–ù–ê–ú:")
        side_stats = df.groupby('side').agg({
            'quantity': ['count', 'sum'],
            'price': 'mean'
        })
        
        for side in side_stats.index:
            count = side_stats.loc[side, ('quantity', 'count')]
            total_quantity = side_stats.loc[side, ('quantity', 'sum')]
            avg_price = side_stats.loc[side, ('price', 'mean')]
            total_value = total_quantity * avg_price
            
            print(f"\n{side} –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏:")
            print(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")
            print(f"  - –û–±—â–∏–π –æ–±—ä–µ–º: {total_quantity:.6f} BTC")
            print(f"  - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avg_price:,.2f}")
            print(f"  - –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:,.2f}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüåç –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  - –í—Å–µ–≥–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: {len(df)}")
        print(f"  - –û–±—â–∏–π –æ–±—ä–µ–º: {df['quantity'].sum():.6f} BTC")
        print(f"  - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${df['price'].mean():,.2f}")
        print(f"  - –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${(df['quantity'] * df['price']).sum():,.2f}")
        print(f"  - –ö—Ä—É–ø–Ω–µ–π—à–∞—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è: {df['quantity'].max():.6f} BTC")
        print(f"  - –ú–µ–ª–∫–∞—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è: {df['quantity'].min():.6f} BTC")
        
        print("="*70)
        
    def check_five_min_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–≤–µ—Å—Ç–∏ 5-–º–∏–Ω—É—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        while self.is_running:
            self.check_and_display_five_min_stats()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    def save_to_csv(self, filename=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –≤ CSV —Ñ–∞–π–ª"""
        if not self.liquidations:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        if filename is None:
            filename = f"binance_liquidations_{self.symbol}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        df = pd.DataFrame(self.liquidations)
        df.to_csv(filename, index=False)
        print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è–º"""
        if not self.liquidations:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        df = pd.DataFrame(self.liquidations)
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–ò–ö–í–ò–î–ê–¶–ò–ô:")
        print(f"–í—Å–µ–≥–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: {len(self.liquidations)}")
        print(f"–ü–µ—Ä–∏–æ–¥: {df['timestamp'].min()} - {df['timestamp'].max()}")
        
        print("\n–ü–æ —Ç–∏–ø—É –ø–æ–∑–∏—Ü–∏–π:")
        print(df['side'].value_counts())
        
        print("\n–û–±—â–∏–µ –æ–±—ä–µ–º—ã:")
        print(f"–û–±—â–∏–π –æ–±—ä–µ–º BTC: {df['quantity'].sum():.4f}")
        print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD: ${(df['quantity'] * df['price']).sum():,.2f}")
        
        print("\n–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        print(f"–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {df['quantity'].mean():.6f} BTC")
        print(f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${df['price'].mean():,.2f}")
        
        return df
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.ws = websocket.WebSocketApp(
            self.websocket_url,
            on_message=self.on_message,
            on_error=self.on_error,
            on_close=self.on_close,
            on_open=self.on_open
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.ws_thread = Thread(target=self.ws.run_forever)
        self.ws_thread.daemon = True
        self.ws_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ 5-–º–∏–Ω—É—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.check_thread = Thread(target=self.check_five_min_periodically)
        self.check_thread.daemon = True
        self.check_thread.start()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞"""
        self.is_running = False
        self.ws.close()
        self.ws_thread.join(timeout=1)
        self.check_thread.join(timeout=1)
        print("–¢—Ä–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        stop_message = f"""
üõë *–¢—Ä–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*
üïí –í—Ä–µ–º—è: `{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`
"""
        self.send_telegram_message(stop_message)

# –ö–ª–∞—Å—Å —Å –∞–ª–µ—Ä—Ç–∞–º–∏ –ø–æ –∫—Ä—É–ø–Ω—ã–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è–º
class AlertLiquidationTrackerTelegram(BinanceLiquidationTrackerTelegram):
    def __init__(self, symbol='BTCUSDT', telegram_bot_token=None, telegram_chat_id=None, min_alert_value=1000):
        super().__init__(symbol, telegram_bot_token, telegram_chat_id)
        self.min_alert_value = min_alert_value  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∞–ª–µ—Ä—Ç–∞
    
    def print_liquidation(self, liquidation):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        total_value = liquidation['quantity'] * liquidation['price']
        
        if total_value >= self.min_alert_value:
            print("\nüö® –ö–†–£–ü–ù–ê–Ø –õ–ò–ö–í–ò–î–ê–¶–ò–Ø! üö®")
            super().print_liquidation(liquidation)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–ª–µ—Ä—Ç –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
            alert_message = f"""
üö® *–ö–†–£–ü–ù–ê–Ø –õ–ò–ö–í–ò–î–ê–¶–ò–Ø!!!*
{self.format_liquidation_message(liquidation)}
‚ö†Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç: `${self.min_alert_value:,.2f}`
"""
            self.send_telegram_message(alert_message)
        else:
            # –ü–µ—á–∞—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ –¥–ª—è –º–µ–ª–∫–∏—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
            print(f"[{liquidation['timestamp'].strftime('%H:%M:%S')}] {liquidation['side']} ${total_value:,.2f}")
            
            # –î–ª—è –º–µ–ª–∫–∏—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            compact_message = f"""
{liquidation['timestamp'].strftime('%H:%M:%S')} | {liquidation['side']} | ${total_value:,.2f}
"""
            self.send_telegram_message(compact_message)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
    TELEGRAM_BOT_TOKEN = "–°–Æ–î–ê_–¢–û–ö–ï–ù_–ë–û–¢–ê"
    TELEGRAM_CHAT_ID = "–°–Æ–î–ê_ID_–ß–ê–¢–ê"  # –î–ª—è –∫–∞–Ω–∞–ª–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram
    tracker = BinanceLiquidationTrackerTelegram(
        symbol='BTCUSDT',
        telegram_bot_token=TELEGRAM_BOT_TOKEN,
        telegram_chat_id=TELEGRAM_CHAT_ID
    )
    
    print("üì° –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–∫–µ—Ä–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π Binance —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
        tracker.start()
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞...")
        tracker.stop()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        tracker.save_to_csv()
        tracker.get_statistics()
        
        print("\n‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –ü—Ä–∏–º–µ—Ä —Å –∞–ª–µ—Ä—Ç–∞–º–∏ –ø–æ –∫—Ä—É–ø–Ω—ã–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è–º
# tracker = AlertLiquidationTrackerTelegram(
#     symbol='BTCUSDT',
#     telegram_bot_token=TELEGRAM_BOT_TOKEN,
#     telegram_chat_id=TELEGRAM_CHAT_ID,
#     min_alert_value=5000
# )
